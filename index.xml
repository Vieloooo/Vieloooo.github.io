<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vielog</title>
    <link>/</link>
    <description>Recent content on Vielog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Oct 2023 10:34:07 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Byzantine Consensus under Static Peer Assumption</title>
      <link>/posts/byzanitne/</link>
      <pubDate>Fri, 06 Oct 2023 10:34:07 +0800</pubDate>
      
      <guid>/posts/byzanitne/</guid>
      <description>Some notes for the book &amp;ldquo;Foundations of Distributed Consensus and Blockchains&amp;rdquo; by Elaine Shi
What is a Byzantine Fault?
Crash Fault: Adversarial nodes do not send or receive any messages. Omission Fault: Adversarial nodes selectively choose to drop or let through each message sent or received. Byzantine Fault: Adversarial nodes can deviate from the protocol arbitrarily. What is static assumption?
Static: Participants in the consensus scenario are pre-defined. In the execution of a consensus protocol, the peers do not change.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>/authors/about/</link>
      <pubDate>Sun, 10 Sep 2023 22:23:29 +0800</pubDate>
      
      <guid>/authors/about/</guid>
      <description> - Under maintenance ... </description>
    </item>
    
    <item>
      <title>如何利用 zk-snark 解决 Mental Poker 问题</title>
      <link>/posts/mental_poker/</link>
      <pubDate>Sun, 10 Sep 2023 10:34:07 +0800</pubDate>
      
      <guid>/posts/mental_poker/</guid>
      <description>最近读到了几篇很有意思的文章, 讨论的是如何解决 Mental Poker 问题. Mental poker 问题 是由 Rivest, Shamir and Adleman 三位密码学家于1979年提出 (就是 RSA 的那三位). 简单来讲, Mental Poker 问</description>
    </item>
    
    <item>
      <title>MIT xv6 design from user prespective</title>
      <link>/posts/xv6-lab1/</link>
      <pubDate>Fri, 01 Oct 2021 10:34:07 +0800</pubDate>
      
      <guid>/posts/xv6-lab1/</guid>
      <description>I will use mit 6.s801 lab1 &amp;ldquo;util&amp;rdquo; as an entry to the code behind. This article will not talk much about how to do lab1, but reveal some delicate design behind the syscall lab1 use.
ex1- sleep #easy
This is the easiest lab in the lab1, so I will not talk about this exercise. Let&amp;rsquo;s go through the syscall sys_sleep in sysproc.c
uint64 sys_sleep(void) { int n; uint ticks0; if(argint(0, &amp;amp;n) &amp;lt; 0) return -1; acquire(&amp;amp;tickslock); ticks0 = ticks;	// ticks is a golbal var maintained by trap while(ticks - ticks0 &amp;lt; n){ if(myproc()-&amp;gt;killed){ release(&amp;amp;tickslock); return -1; } sleep(&amp;amp;ticks, &amp;amp;tickslock); } release(&amp;amp;tickslock); return 0; } ticks is the global variable maintained in trap.</description>
    </item>
    
    <item>
      <title>xv6 file system</title>
      <link>/posts/xv6-fs/</link>
      <pubDate>Fri, 01 Oct 2021 10:34:07 +0800</pubDate>
      
      <guid>/posts/xv6-fs/</guid>
      <description>xv6 File system overview In general, There are 3 different ascpect on unix-like file system, file descriptor, file/directory and block. In xv6, they are distributed into 7 layers: Block interface The xv file system&amp;rsquo;s block interface consists of 34 layers(disk, buffer cache , logging and bitmap) Goal: achieve crash recovery
Disk Disk is the most primitive layer of fs, which provide directly block R/W in device. Buffer cache This layer maintains a LRU Buffer queue to cache block data on disk, providing</description>
    </item>
    
    <item>
      <title>Moments</title>
      <link>/gallery/moments/</link>
      <pubDate>Mon, 23 Nov 2020 21:30:32 +0800</pubDate>
      
      <guid>/gallery/moments/</guid>
      <description>元旦的海 除夕之列</description>
    </item>
    
    <item>
      <title>Ubuntu</title>
      <link>/posts/ubuntu/</link>
      <pubDate>Mon, 23 Nov 2020 21:30:32 +0800</pubDate>
      
      <guid>/posts/ubuntu/</guid>
      <description>outline 硬件准备 clash on linux 开发环境搭建 硬件准备 灵越 7590 ， windows 系统盘 ssd + sn750 空盘 bios 中，把硬盘模式调到achi ， 关闭security boot ，关闭 windows 快速启动，打开le</description>
    </item>
    
    <item>
      <title>春梦的联想</title>
      <link>/posts/springdream/</link>
      <pubDate>Tue, 03 Mar 2020 20:02:36 +0800</pubDate>
      
      <guid>/posts/springdream/</guid>
      <description>这个春日的午后 很温暖 窗外 每栋楼上，影子的边缘都格外清晰 不知名的鸟在空中盘旋 叽叽喳喳着 你躺在床上 确确实实感受到 春天的确来了 恍惚间 你好似回到了童</description>
    </item>
    
    <item>
      <title></title>
      <link>/log/2021-26/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/log/2021-26/</guid>
      <description>最近学了一些什么 BC golang Merkle Tree 实现 MPT 基本内容 zero knowledge proof rust intro English trying to restore my speaking traning cultivate some test resource of ielts 课内 完成了一个简单的miniRv 汇编实验 开始单周期cpu设计实验 dev</description>
    </item>
    
  </channel>
</rss>
